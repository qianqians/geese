/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as create_remote_entity from "./create_remote_entity";
import * as delete_remote_entity from "./delete_remote_entity";
import * as refresh_entity from "./refresh_entity";
import * as ntf_conn_id from "./ntf_conn_id";
import * as kick_off from "./kick_off";
import * as transfer_complete from "./transfer_complete";
import * as call_rpc from "./call_rpc";
import * as call_rsp from "./call_rsp";
import * as call_err from "./call_err";
import * as call_ntf from "./call_ntf";
import * as call_global from "./call_global";
import * as gate_call_heartbeats from "./gate_call_heartbeats";
export interface Iclient_serviceArgs {
    create_remote_entity?: create_remote_entity.create_remote_entity;
    delete_remote_entity?: delete_remote_entity.delete_remote_entity;
    refresh_entity?: refresh_entity.refresh_entity;
    conn_id?: ntf_conn_id.ntf_conn_id;
    kick_off?: kick_off.kick_off;
    transfer_complete?: transfer_complete.transfer_complete;
    call_rpc?: call_rpc.call_rpc;
    call_rsp?: call_rsp.call_rsp;
    call_err?: call_err.call_err;
    call_ntf?: call_ntf.call_ntf;
    call_global?: call_global.call_global;
    heartbeats?: gate_call_heartbeats.gate_call_heartbeats;
}
export class client_service {
    public create_remote_entity?: create_remote_entity.create_remote_entity;
    public delete_remote_entity?: delete_remote_entity.delete_remote_entity;
    public refresh_entity?: refresh_entity.refresh_entity;
    public conn_id?: ntf_conn_id.ntf_conn_id;
    public kick_off?: kick_off.kick_off;
    public transfer_complete?: transfer_complete.transfer_complete;
    public call_rpc?: call_rpc.call_rpc;
    public call_rsp?: call_rsp.call_rsp;
    public call_err?: call_err.call_err;
    public call_ntf?: call_ntf.call_ntf;
    public call_global?: call_global.call_global;
    public heartbeats?: gate_call_heartbeats.gate_call_heartbeats;
    constructor(args?: Iclient_serviceArgs) {
        let _fieldsSet: number = 0;
        if (args != null) {
            if (args.create_remote_entity != null) {
                _fieldsSet++;
                this.create_remote_entity = args.create_remote_entity;
            }
            if (args.delete_remote_entity != null) {
                _fieldsSet++;
                this.delete_remote_entity = args.delete_remote_entity;
            }
            if (args.refresh_entity != null) {
                _fieldsSet++;
                this.refresh_entity = args.refresh_entity;
            }
            if (args.conn_id != null) {
                _fieldsSet++;
                this.conn_id = args.conn_id;
            }
            if (args.kick_off != null) {
                _fieldsSet++;
                this.kick_off = args.kick_off;
            }
            if (args.transfer_complete != null) {
                _fieldsSet++;
                this.transfer_complete = args.transfer_complete;
            }
            if (args.call_rpc != null) {
                _fieldsSet++;
                this.call_rpc = args.call_rpc;
            }
            if (args.call_rsp != null) {
                _fieldsSet++;
                this.call_rsp = args.call_rsp;
            }
            if (args.call_err != null) {
                _fieldsSet++;
                this.call_err = args.call_err;
            }
            if (args.call_ntf != null) {
                _fieldsSet++;
                this.call_ntf = args.call_ntf;
            }
            if (args.call_global != null) {
                _fieldsSet++;
                this.call_global = args.call_global;
            }
            if (args.heartbeats != null) {
                _fieldsSet++;
                this.heartbeats = args.heartbeats;
            }
            if (_fieldsSet > 1) {
                throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.INVALID_DATA, "Cannot read a TUnion with more than one set value!");
            }
            else if (_fieldsSet < 1) {
                throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.INVALID_DATA, "Cannot read a TUnion with no set value!");
            }
        }
    }
    public static fromCreate_remote_entity(create_remote_entity: create_remote_entity.create_remote_entity): client_service {
        return new client_service({ create_remote_entity });
    }
    public static fromDelete_remote_entity(delete_remote_entity: delete_remote_entity.delete_remote_entity): client_service {
        return new client_service({ delete_remote_entity });
    }
    public static fromRefresh_entity(refresh_entity: refresh_entity.refresh_entity): client_service {
        return new client_service({ refresh_entity });
    }
    public static fromConn_id(conn_id: ntf_conn_id.ntf_conn_id): client_service {
        return new client_service({ conn_id });
    }
    public static fromKick_off(kick_off: kick_off.kick_off): client_service {
        return new client_service({ kick_off });
    }
    public static fromTransfer_complete(transfer_complete: transfer_complete.transfer_complete): client_service {
        return new client_service({ transfer_complete });
    }
    public static fromCall_rpc(call_rpc: call_rpc.call_rpc): client_service {
        return new client_service({ call_rpc });
    }
    public static fromCall_rsp(call_rsp: call_rsp.call_rsp): client_service {
        return new client_service({ call_rsp });
    }
    public static fromCall_err(call_err: call_err.call_err): client_service {
        return new client_service({ call_err });
    }
    public static fromCall_ntf(call_ntf: call_ntf.call_ntf): client_service {
        return new client_service({ call_ntf });
    }
    public static fromCall_global(call_global: call_global.call_global): client_service {
        return new client_service({ call_global });
    }
    public static fromHeartbeats(heartbeats: gate_call_heartbeats.gate_call_heartbeats): client_service {
        return new client_service({ heartbeats });
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("client_service");
        if (this.create_remote_entity != null) {
            output.writeFieldBegin("create_remote_entity", thrift.Thrift.Type.STRUCT, 1);
            this.create_remote_entity.write(output);
            output.writeFieldEnd();
        }
        if (this.delete_remote_entity != null) {
            output.writeFieldBegin("delete_remote_entity", thrift.Thrift.Type.STRUCT, 2);
            this.delete_remote_entity.write(output);
            output.writeFieldEnd();
        }
        if (this.refresh_entity != null) {
            output.writeFieldBegin("refresh_entity", thrift.Thrift.Type.STRUCT, 3);
            this.refresh_entity.write(output);
            output.writeFieldEnd();
        }
        if (this.conn_id != null) {
            output.writeFieldBegin("conn_id", thrift.Thrift.Type.STRUCT, 4);
            this.conn_id.write(output);
            output.writeFieldEnd();
        }
        if (this.kick_off != null) {
            output.writeFieldBegin("kick_off", thrift.Thrift.Type.STRUCT, 5);
            this.kick_off.write(output);
            output.writeFieldEnd();
        }
        if (this.transfer_complete != null) {
            output.writeFieldBegin("transfer_complete", thrift.Thrift.Type.STRUCT, 6);
            this.transfer_complete.write(output);
            output.writeFieldEnd();
        }
        if (this.call_rpc != null) {
            output.writeFieldBegin("call_rpc", thrift.Thrift.Type.STRUCT, 7);
            this.call_rpc.write(output);
            output.writeFieldEnd();
        }
        if (this.call_rsp != null) {
            output.writeFieldBegin("call_rsp", thrift.Thrift.Type.STRUCT, 8);
            this.call_rsp.write(output);
            output.writeFieldEnd();
        }
        if (this.call_err != null) {
            output.writeFieldBegin("call_err", thrift.Thrift.Type.STRUCT, 9);
            this.call_err.write(output);
            output.writeFieldEnd();
        }
        if (this.call_ntf != null) {
            output.writeFieldBegin("call_ntf", thrift.Thrift.Type.STRUCT, 10);
            this.call_ntf.write(output);
            output.writeFieldEnd();
        }
        if (this.call_global != null) {
            output.writeFieldBegin("call_global", thrift.Thrift.Type.STRUCT, 11);
            this.call_global.write(output);
            output.writeFieldEnd();
        }
        if (this.heartbeats != null) {
            output.writeFieldBegin("heartbeats", thrift.Thrift.Type.STRUCT, 12);
            this.heartbeats.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): client_service {
        let _fieldsSet: number = 0;
        let _returnValue: client_service | null = null;
        input.readStructBegin();
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        _fieldsSet++;
                        const value_1: create_remote_entity.create_remote_entity = create_remote_entity.create_remote_entity.read(input);
                        _returnValue = client_service.fromCreate_remote_entity(value_1);
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        _fieldsSet++;
                        const value_2: delete_remote_entity.delete_remote_entity = delete_remote_entity.delete_remote_entity.read(input);
                        _returnValue = client_service.fromDelete_remote_entity(value_2);
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        _fieldsSet++;
                        const value_3: refresh_entity.refresh_entity = refresh_entity.refresh_entity.read(input);
                        _returnValue = client_service.fromRefresh_entity(value_3);
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        _fieldsSet++;
                        const value_4: ntf_conn_id.ntf_conn_id = ntf_conn_id.ntf_conn_id.read(input);
                        _returnValue = client_service.fromConn_id(value_4);
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        _fieldsSet++;
                        const value_5: kick_off.kick_off = kick_off.kick_off.read(input);
                        _returnValue = client_service.fromKick_off(value_5);
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        _fieldsSet++;
                        const value_6: transfer_complete.transfer_complete = transfer_complete.transfer_complete.read(input);
                        _returnValue = client_service.fromTransfer_complete(value_6);
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        _fieldsSet++;
                        const value_7: call_rpc.call_rpc = call_rpc.call_rpc.read(input);
                        _returnValue = client_service.fromCall_rpc(value_7);
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        _fieldsSet++;
                        const value_8: call_rsp.call_rsp = call_rsp.call_rsp.read(input);
                        _returnValue = client_service.fromCall_rsp(value_8);
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        _fieldsSet++;
                        const value_9: call_err.call_err = call_err.call_err.read(input);
                        _returnValue = client_service.fromCall_err(value_9);
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        _fieldsSet++;
                        const value_10: call_ntf.call_ntf = call_ntf.call_ntf.read(input);
                        _returnValue = client_service.fromCall_ntf(value_10);
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        _fieldsSet++;
                        const value_11: call_global.call_global = call_global.call_global.read(input);
                        _returnValue = client_service.fromCall_global(value_11);
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 12:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        _fieldsSet++;
                        const value_12: gate_call_heartbeats.gate_call_heartbeats = gate_call_heartbeats.gate_call_heartbeats.read(input);
                        _returnValue = client_service.fromHeartbeats(value_12);
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_fieldsSet > 1) {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.INVALID_DATA, "Cannot read a TUnion with more than one set value!");
        }
        else if (_fieldsSet < 1) {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.INVALID_DATA, "Cannot read a TUnion with no set value!");
        }
        if (_returnValue !== null) {
            return _returnValue;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read data for TUnion");
        }
    }
}
