/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as client_request_hub_login from "./client_request_hub_login";
import * as client_request_hub_reconnect from "./client_request_hub_reconnect";
import * as client_request_hub_service from "./client_request_hub_service";
import * as client_call_hub_rpc from "./client_call_hub_rpc";
import * as client_call_hub_rsp from "./client_call_hub_rsp";
import * as client_call_hub_err from "./client_call_hub_err";
import * as client_call_hub_ntf from "./client_call_hub_ntf";
import * as client_call_gate_heartbeats from "./client_call_gate_heartbeats";
export interface Igate_client_serviceArgs {
    login?: client_request_hub_login.client_request_hub_login;
    reconnect?: client_request_hub_reconnect.client_request_hub_reconnect;
    request_hub_service?: client_request_hub_service.client_request_hub_service;
    call_rpc?: client_call_hub_rpc.client_call_hub_rpc;
    call_rsp?: client_call_hub_rsp.client_call_hub_rsp;
    call_err?: client_call_hub_err.client_call_hub_err;
    call_ntf?: client_call_hub_ntf.client_call_hub_ntf;
    heartbeats?: client_call_gate_heartbeats.client_call_gate_heartbeats;
}
export class gate_client_service {
    public login?: client_request_hub_login.client_request_hub_login;
    public reconnect?: client_request_hub_reconnect.client_request_hub_reconnect;
    public request_hub_service?: client_request_hub_service.client_request_hub_service;
    public call_rpc?: client_call_hub_rpc.client_call_hub_rpc;
    public call_rsp?: client_call_hub_rsp.client_call_hub_rsp;
    public call_err?: client_call_hub_err.client_call_hub_err;
    public call_ntf?: client_call_hub_ntf.client_call_hub_ntf;
    public heartbeats?: client_call_gate_heartbeats.client_call_gate_heartbeats;
    constructor(args?: Igate_client_serviceArgs) {
        let _fieldsSet: number = 0;
        if (args != null) {
            if (args.login != null) {
                _fieldsSet++;
                this.login = args.login;
            }
            if (args.reconnect != null) {
                _fieldsSet++;
                this.reconnect = args.reconnect;
            }
            if (args.request_hub_service != null) {
                _fieldsSet++;
                this.request_hub_service = args.request_hub_service;
            }
            if (args.call_rpc != null) {
                _fieldsSet++;
                this.call_rpc = args.call_rpc;
            }
            if (args.call_rsp != null) {
                _fieldsSet++;
                this.call_rsp = args.call_rsp;
            }
            if (args.call_err != null) {
                _fieldsSet++;
                this.call_err = args.call_err;
            }
            if (args.call_ntf != null) {
                _fieldsSet++;
                this.call_ntf = args.call_ntf;
            }
            if (args.heartbeats != null) {
                _fieldsSet++;
                this.heartbeats = args.heartbeats;
            }
            if (_fieldsSet > 1) {
                throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.INVALID_DATA, "Cannot read a TUnion with more than one set value!");
            }
            else if (_fieldsSet < 1) {
                throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.INVALID_DATA, "Cannot read a TUnion with no set value!");
            }
        }
    }
    public static fromLogin(login: client_request_hub_login.client_request_hub_login): gate_client_service {
        return new gate_client_service({ login });
    }
    public static fromReconnect(reconnect: client_request_hub_reconnect.client_request_hub_reconnect): gate_client_service {
        return new gate_client_service({ reconnect });
    }
    public static fromRequest_hub_service(request_hub_service: client_request_hub_service.client_request_hub_service): gate_client_service {
        return new gate_client_service({ request_hub_service });
    }
    public static fromCall_rpc(call_rpc: client_call_hub_rpc.client_call_hub_rpc): gate_client_service {
        return new gate_client_service({ call_rpc });
    }
    public static fromCall_rsp(call_rsp: client_call_hub_rsp.client_call_hub_rsp): gate_client_service {
        return new gate_client_service({ call_rsp });
    }
    public static fromCall_err(call_err: client_call_hub_err.client_call_hub_err): gate_client_service {
        return new gate_client_service({ call_err });
    }
    public static fromCall_ntf(call_ntf: client_call_hub_ntf.client_call_hub_ntf): gate_client_service {
        return new gate_client_service({ call_ntf });
    }
    public static fromHeartbeats(heartbeats: client_call_gate_heartbeats.client_call_gate_heartbeats): gate_client_service {
        return new gate_client_service({ heartbeats });
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("gate_client_service");
        if (this.login != null) {
            output.writeFieldBegin("login", thrift.Thrift.Type.STRUCT, 1);
            this.login.write(output);
            output.writeFieldEnd();
        }
        if (this.reconnect != null) {
            output.writeFieldBegin("reconnect", thrift.Thrift.Type.STRUCT, 2);
            this.reconnect.write(output);
            output.writeFieldEnd();
        }
        if (this.request_hub_service != null) {
            output.writeFieldBegin("request_hub_service", thrift.Thrift.Type.STRUCT, 3);
            this.request_hub_service.write(output);
            output.writeFieldEnd();
        }
        if (this.call_rpc != null) {
            output.writeFieldBegin("call_rpc", thrift.Thrift.Type.STRUCT, 4);
            this.call_rpc.write(output);
            output.writeFieldEnd();
        }
        if (this.call_rsp != null) {
            output.writeFieldBegin("call_rsp", thrift.Thrift.Type.STRUCT, 5);
            this.call_rsp.write(output);
            output.writeFieldEnd();
        }
        if (this.call_err != null) {
            output.writeFieldBegin("call_err", thrift.Thrift.Type.STRUCT, 6);
            this.call_err.write(output);
            output.writeFieldEnd();
        }
        if (this.call_ntf != null) {
            output.writeFieldBegin("call_ntf", thrift.Thrift.Type.STRUCT, 7);
            this.call_ntf.write(output);
            output.writeFieldEnd();
        }
        if (this.heartbeats != null) {
            output.writeFieldBegin("heartbeats", thrift.Thrift.Type.STRUCT, 8);
            this.heartbeats.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): gate_client_service {
        let _fieldsSet: number = 0;
        let _returnValue: gate_client_service | null = null;
        input.readStructBegin();
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        _fieldsSet++;
                        const value_1: client_request_hub_login.client_request_hub_login = client_request_hub_login.client_request_hub_login.read(input);
                        _returnValue = gate_client_service.fromLogin(value_1);
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        _fieldsSet++;
                        const value_2: client_request_hub_reconnect.client_request_hub_reconnect = client_request_hub_reconnect.client_request_hub_reconnect.read(input);
                        _returnValue = gate_client_service.fromReconnect(value_2);
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        _fieldsSet++;
                        const value_3: client_request_hub_service.client_request_hub_service = client_request_hub_service.client_request_hub_service.read(input);
                        _returnValue = gate_client_service.fromRequest_hub_service(value_3);
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        _fieldsSet++;
                        const value_4: client_call_hub_rpc.client_call_hub_rpc = client_call_hub_rpc.client_call_hub_rpc.read(input);
                        _returnValue = gate_client_service.fromCall_rpc(value_4);
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        _fieldsSet++;
                        const value_5: client_call_hub_rsp.client_call_hub_rsp = client_call_hub_rsp.client_call_hub_rsp.read(input);
                        _returnValue = gate_client_service.fromCall_rsp(value_5);
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        _fieldsSet++;
                        const value_6: client_call_hub_err.client_call_hub_err = client_call_hub_err.client_call_hub_err.read(input);
                        _returnValue = gate_client_service.fromCall_err(value_6);
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        _fieldsSet++;
                        const value_7: client_call_hub_ntf.client_call_hub_ntf = client_call_hub_ntf.client_call_hub_ntf.read(input);
                        _returnValue = gate_client_service.fromCall_ntf(value_7);
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        _fieldsSet++;
                        const value_8: client_call_gate_heartbeats.client_call_gate_heartbeats = client_call_gate_heartbeats.client_call_gate_heartbeats.read(input);
                        _returnValue = gate_client_service.fromHeartbeats(value_8);
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_fieldsSet > 1) {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.INVALID_DATA, "Cannot read a TUnion with more than one set value!");
        }
        else if (_fieldsSet < 1) {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.INVALID_DATA, "Cannot read a TUnion with no set value!");
        }
        if (_returnValue !== null) {
            return _returnValue;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read data for TUnion");
        }
    }
}
