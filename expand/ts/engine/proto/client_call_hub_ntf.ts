/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as __ROOT_NAMESPACE__ from "./";
export interface Iclient_call_hub_ntfArgs {
    entity_id?: string;
    message?: __ROOT_NAMESPACE__.msg;
}
export class client_call_hub_ntf {
    public entity_id?: string;
    public message?: __ROOT_NAMESPACE__.msg;
    constructor(args?: Iclient_call_hub_ntfArgs) {
        if (args != null && args.entity_id != null) {
            this.entity_id = args.entity_id;
        }
        if (args != null && args.message != null) {
            this.message = args.message;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("client_call_hub_ntf");
        if (this.entity_id != null) {
            output.writeFieldBegin("entity_id", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.entity_id);
            output.writeFieldEnd();
        }
        if (this.message != null) {
            output.writeFieldBegin("message", thrift.Thrift.Type.STRUCT, 2);
            this.message.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): client_call_hub_ntf {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_1: string = input.readString();
                        _args.entity_id = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_2: __ROOT_NAMESPACE__.msg = __ROOT_NAMESPACE__.msg.read(input);
                        _args.message = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new client_call_hub_ntf(_args);
    }
}
