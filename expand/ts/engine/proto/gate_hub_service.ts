/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as __ROOT_NAMESPACE__ from "./";
import * as hub_call_client_create_remote_entity from "./hub_call_client_create_remote_entity";
import * as hub_call_client_delete_remote_entity from "./hub_call_client_delete_remote_entity";
import * as hub_call_client_refresh_entity from "./hub_call_client_refresh_entity";
import * as hub_call_client_rpc from "./hub_call_client_rpc";
import * as hub_call_client_rsp from "./hub_call_client_rsp";
import * as hub_call_client_err from "./hub_call_client_err";
import * as hub_call_client_ntf from "./hub_call_client_ntf";
import * as hub_call_client_global from "./hub_call_client_global";
import * as hub_call_kick_off_client from "./hub_call_kick_off_client";
import * as hub_call_kick_off_client_complete from "./hub_call_kick_off_client_complete";
import * as hub_call_transfer_client from "./hub_call_transfer_client";
import * as hub_call_transfer_entity_complete from "./hub_call_transfer_entity_complete";
import * as hub_call_wait_migrate_entity from "./hub_call_wait_migrate_entity";
import * as hub_call_migrate_entity_complete from "./hub_call_migrate_entity_complete";
export interface Igate_hub_serviceArgs {
    reg_server?: __ROOT_NAMESPACE__.reg_server;
    reg_server_callback?: __ROOT_NAMESPACE__.reg_server_callback;
    create_remote_entity?: hub_call_client_create_remote_entity.hub_call_client_create_remote_entity;
    delete_remote_entity?: hub_call_client_delete_remote_entity.hub_call_client_delete_remote_entity;
    refresh_entity?: hub_call_client_refresh_entity.hub_call_client_refresh_entity;
    call_rpc?: hub_call_client_rpc.hub_call_client_rpc;
    call_rsp?: hub_call_client_rsp.hub_call_client_rsp;
    call_err?: hub_call_client_err.hub_call_client_err;
    call_ntf?: hub_call_client_ntf.hub_call_client_ntf;
    call_global?: hub_call_client_global.hub_call_client_global;
    kick_off?: hub_call_kick_off_client.hub_call_kick_off_client;
    kick_off_complete?: hub_call_kick_off_client_complete.hub_call_kick_off_client_complete;
    transfer?: hub_call_transfer_client.hub_call_transfer_client;
    transfer_complete?: hub_call_transfer_entity_complete.hub_call_transfer_entity_complete;
    wait_migrate_entity?: hub_call_wait_migrate_entity.hub_call_wait_migrate_entity;
    migrate_entity_complete?: hub_call_migrate_entity_complete.hub_call_migrate_entity_complete;
}
export class gate_hub_service {
    public reg_server?: __ROOT_NAMESPACE__.reg_server;
    public reg_server_callback?: __ROOT_NAMESPACE__.reg_server_callback;
    public create_remote_entity?: hub_call_client_create_remote_entity.hub_call_client_create_remote_entity;
    public delete_remote_entity?: hub_call_client_delete_remote_entity.hub_call_client_delete_remote_entity;
    public refresh_entity?: hub_call_client_refresh_entity.hub_call_client_refresh_entity;
    public call_rpc?: hub_call_client_rpc.hub_call_client_rpc;
    public call_rsp?: hub_call_client_rsp.hub_call_client_rsp;
    public call_err?: hub_call_client_err.hub_call_client_err;
    public call_ntf?: hub_call_client_ntf.hub_call_client_ntf;
    public call_global?: hub_call_client_global.hub_call_client_global;
    public kick_off?: hub_call_kick_off_client.hub_call_kick_off_client;
    public kick_off_complete?: hub_call_kick_off_client_complete.hub_call_kick_off_client_complete;
    public transfer?: hub_call_transfer_client.hub_call_transfer_client;
    public transfer_complete?: hub_call_transfer_entity_complete.hub_call_transfer_entity_complete;
    public wait_migrate_entity?: hub_call_wait_migrate_entity.hub_call_wait_migrate_entity;
    public migrate_entity_complete?: hub_call_migrate_entity_complete.hub_call_migrate_entity_complete;
    constructor(args?: Igate_hub_serviceArgs) {
        let _fieldsSet: number = 0;
        if (args != null) {
            if (args.reg_server != null) {
                _fieldsSet++;
                this.reg_server = args.reg_server;
            }
            if (args.reg_server_callback != null) {
                _fieldsSet++;
                this.reg_server_callback = args.reg_server_callback;
            }
            if (args.create_remote_entity != null) {
                _fieldsSet++;
                this.create_remote_entity = args.create_remote_entity;
            }
            if (args.delete_remote_entity != null) {
                _fieldsSet++;
                this.delete_remote_entity = args.delete_remote_entity;
            }
            if (args.refresh_entity != null) {
                _fieldsSet++;
                this.refresh_entity = args.refresh_entity;
            }
            if (args.call_rpc != null) {
                _fieldsSet++;
                this.call_rpc = args.call_rpc;
            }
            if (args.call_rsp != null) {
                _fieldsSet++;
                this.call_rsp = args.call_rsp;
            }
            if (args.call_err != null) {
                _fieldsSet++;
                this.call_err = args.call_err;
            }
            if (args.call_ntf != null) {
                _fieldsSet++;
                this.call_ntf = args.call_ntf;
            }
            if (args.call_global != null) {
                _fieldsSet++;
                this.call_global = args.call_global;
            }
            if (args.kick_off != null) {
                _fieldsSet++;
                this.kick_off = args.kick_off;
            }
            if (args.kick_off_complete != null) {
                _fieldsSet++;
                this.kick_off_complete = args.kick_off_complete;
            }
            if (args.transfer != null) {
                _fieldsSet++;
                this.transfer = args.transfer;
            }
            if (args.transfer_complete != null) {
                _fieldsSet++;
                this.transfer_complete = args.transfer_complete;
            }
            if (args.wait_migrate_entity != null) {
                _fieldsSet++;
                this.wait_migrate_entity = args.wait_migrate_entity;
            }
            if (args.migrate_entity_complete != null) {
                _fieldsSet++;
                this.migrate_entity_complete = args.migrate_entity_complete;
            }
            if (_fieldsSet > 1) {
                throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.INVALID_DATA, "Cannot read a TUnion with more than one set value!");
            }
            else if (_fieldsSet < 1) {
                throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.INVALID_DATA, "Cannot read a TUnion with no set value!");
            }
        }
    }
    public static fromReg_server(reg_server: __ROOT_NAMESPACE__.reg_server): gate_hub_service {
        return new gate_hub_service({ reg_server });
    }
    public static fromReg_server_callback(reg_server_callback: __ROOT_NAMESPACE__.reg_server_callback): gate_hub_service {
        return new gate_hub_service({ reg_server_callback });
    }
    public static fromCreate_remote_entity(create_remote_entity: hub_call_client_create_remote_entity.hub_call_client_create_remote_entity): gate_hub_service {
        return new gate_hub_service({ create_remote_entity });
    }
    public static fromDelete_remote_entity(delete_remote_entity: hub_call_client_delete_remote_entity.hub_call_client_delete_remote_entity): gate_hub_service {
        return new gate_hub_service({ delete_remote_entity });
    }
    public static fromRefresh_entity(refresh_entity: hub_call_client_refresh_entity.hub_call_client_refresh_entity): gate_hub_service {
        return new gate_hub_service({ refresh_entity });
    }
    public static fromCall_rpc(call_rpc: hub_call_client_rpc.hub_call_client_rpc): gate_hub_service {
        return new gate_hub_service({ call_rpc });
    }
    public static fromCall_rsp(call_rsp: hub_call_client_rsp.hub_call_client_rsp): gate_hub_service {
        return new gate_hub_service({ call_rsp });
    }
    public static fromCall_err(call_err: hub_call_client_err.hub_call_client_err): gate_hub_service {
        return new gate_hub_service({ call_err });
    }
    public static fromCall_ntf(call_ntf: hub_call_client_ntf.hub_call_client_ntf): gate_hub_service {
        return new gate_hub_service({ call_ntf });
    }
    public static fromCall_global(call_global: hub_call_client_global.hub_call_client_global): gate_hub_service {
        return new gate_hub_service({ call_global });
    }
    public static fromKick_off(kick_off: hub_call_kick_off_client.hub_call_kick_off_client): gate_hub_service {
        return new gate_hub_service({ kick_off });
    }
    public static fromKick_off_complete(kick_off_complete: hub_call_kick_off_client_complete.hub_call_kick_off_client_complete): gate_hub_service {
        return new gate_hub_service({ kick_off_complete });
    }
    public static fromTransfer(transfer: hub_call_transfer_client.hub_call_transfer_client): gate_hub_service {
        return new gate_hub_service({ transfer });
    }
    public static fromTransfer_complete(transfer_complete: hub_call_transfer_entity_complete.hub_call_transfer_entity_complete): gate_hub_service {
        return new gate_hub_service({ transfer_complete });
    }
    public static fromWait_migrate_entity(wait_migrate_entity: hub_call_wait_migrate_entity.hub_call_wait_migrate_entity): gate_hub_service {
        return new gate_hub_service({ wait_migrate_entity });
    }
    public static fromMigrate_entity_complete(migrate_entity_complete: hub_call_migrate_entity_complete.hub_call_migrate_entity_complete): gate_hub_service {
        return new gate_hub_service({ migrate_entity_complete });
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("gate_hub_service");
        if (this.reg_server != null) {
            output.writeFieldBegin("reg_server", thrift.Thrift.Type.STRUCT, 1);
            this.reg_server.write(output);
            output.writeFieldEnd();
        }
        if (this.reg_server_callback != null) {
            output.writeFieldBegin("reg_server_callback", thrift.Thrift.Type.STRUCT, 2);
            this.reg_server_callback.write(output);
            output.writeFieldEnd();
        }
        if (this.create_remote_entity != null) {
            output.writeFieldBegin("create_remote_entity", thrift.Thrift.Type.STRUCT, 3);
            this.create_remote_entity.write(output);
            output.writeFieldEnd();
        }
        if (this.delete_remote_entity != null) {
            output.writeFieldBegin("delete_remote_entity", thrift.Thrift.Type.STRUCT, 4);
            this.delete_remote_entity.write(output);
            output.writeFieldEnd();
        }
        if (this.refresh_entity != null) {
            output.writeFieldBegin("refresh_entity", thrift.Thrift.Type.STRUCT, 5);
            this.refresh_entity.write(output);
            output.writeFieldEnd();
        }
        if (this.call_rpc != null) {
            output.writeFieldBegin("call_rpc", thrift.Thrift.Type.STRUCT, 6);
            this.call_rpc.write(output);
            output.writeFieldEnd();
        }
        if (this.call_rsp != null) {
            output.writeFieldBegin("call_rsp", thrift.Thrift.Type.STRUCT, 7);
            this.call_rsp.write(output);
            output.writeFieldEnd();
        }
        if (this.call_err != null) {
            output.writeFieldBegin("call_err", thrift.Thrift.Type.STRUCT, 8);
            this.call_err.write(output);
            output.writeFieldEnd();
        }
        if (this.call_ntf != null) {
            output.writeFieldBegin("call_ntf", thrift.Thrift.Type.STRUCT, 9);
            this.call_ntf.write(output);
            output.writeFieldEnd();
        }
        if (this.call_global != null) {
            output.writeFieldBegin("call_global", thrift.Thrift.Type.STRUCT, 10);
            this.call_global.write(output);
            output.writeFieldEnd();
        }
        if (this.kick_off != null) {
            output.writeFieldBegin("kick_off", thrift.Thrift.Type.STRUCT, 11);
            this.kick_off.write(output);
            output.writeFieldEnd();
        }
        if (this.kick_off_complete != null) {
            output.writeFieldBegin("kick_off_complete", thrift.Thrift.Type.STRUCT, 12);
            this.kick_off_complete.write(output);
            output.writeFieldEnd();
        }
        if (this.transfer != null) {
            output.writeFieldBegin("transfer", thrift.Thrift.Type.STRUCT, 13);
            this.transfer.write(output);
            output.writeFieldEnd();
        }
        if (this.transfer_complete != null) {
            output.writeFieldBegin("transfer_complete", thrift.Thrift.Type.STRUCT, 14);
            this.transfer_complete.write(output);
            output.writeFieldEnd();
        }
        if (this.wait_migrate_entity != null) {
            output.writeFieldBegin("wait_migrate_entity", thrift.Thrift.Type.STRUCT, 15);
            this.wait_migrate_entity.write(output);
            output.writeFieldEnd();
        }
        if (this.migrate_entity_complete != null) {
            output.writeFieldBegin("migrate_entity_complete", thrift.Thrift.Type.STRUCT, 16);
            this.migrate_entity_complete.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): gate_hub_service {
        let _fieldsSet: number = 0;
        let _returnValue: gate_hub_service | null = null;
        input.readStructBegin();
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        _fieldsSet++;
                        const value_1: __ROOT_NAMESPACE__.reg_server = __ROOT_NAMESPACE__.reg_server.read(input);
                        _returnValue = gate_hub_service.fromReg_server(value_1);
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        _fieldsSet++;
                        const value_2: __ROOT_NAMESPACE__.reg_server_callback = __ROOT_NAMESPACE__.reg_server_callback.read(input);
                        _returnValue = gate_hub_service.fromReg_server_callback(value_2);
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        _fieldsSet++;
                        const value_3: hub_call_client_create_remote_entity.hub_call_client_create_remote_entity = hub_call_client_create_remote_entity.hub_call_client_create_remote_entity.read(input);
                        _returnValue = gate_hub_service.fromCreate_remote_entity(value_3);
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        _fieldsSet++;
                        const value_4: hub_call_client_delete_remote_entity.hub_call_client_delete_remote_entity = hub_call_client_delete_remote_entity.hub_call_client_delete_remote_entity.read(input);
                        _returnValue = gate_hub_service.fromDelete_remote_entity(value_4);
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        _fieldsSet++;
                        const value_5: hub_call_client_refresh_entity.hub_call_client_refresh_entity = hub_call_client_refresh_entity.hub_call_client_refresh_entity.read(input);
                        _returnValue = gate_hub_service.fromRefresh_entity(value_5);
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        _fieldsSet++;
                        const value_6: hub_call_client_rpc.hub_call_client_rpc = hub_call_client_rpc.hub_call_client_rpc.read(input);
                        _returnValue = gate_hub_service.fromCall_rpc(value_6);
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        _fieldsSet++;
                        const value_7: hub_call_client_rsp.hub_call_client_rsp = hub_call_client_rsp.hub_call_client_rsp.read(input);
                        _returnValue = gate_hub_service.fromCall_rsp(value_7);
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        _fieldsSet++;
                        const value_8: hub_call_client_err.hub_call_client_err = hub_call_client_err.hub_call_client_err.read(input);
                        _returnValue = gate_hub_service.fromCall_err(value_8);
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        _fieldsSet++;
                        const value_9: hub_call_client_ntf.hub_call_client_ntf = hub_call_client_ntf.hub_call_client_ntf.read(input);
                        _returnValue = gate_hub_service.fromCall_ntf(value_9);
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        _fieldsSet++;
                        const value_10: hub_call_client_global.hub_call_client_global = hub_call_client_global.hub_call_client_global.read(input);
                        _returnValue = gate_hub_service.fromCall_global(value_10);
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        _fieldsSet++;
                        const value_11: hub_call_kick_off_client.hub_call_kick_off_client = hub_call_kick_off_client.hub_call_kick_off_client.read(input);
                        _returnValue = gate_hub_service.fromKick_off(value_11);
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 12:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        _fieldsSet++;
                        const value_12: hub_call_kick_off_client_complete.hub_call_kick_off_client_complete = hub_call_kick_off_client_complete.hub_call_kick_off_client_complete.read(input);
                        _returnValue = gate_hub_service.fromKick_off_complete(value_12);
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 13:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        _fieldsSet++;
                        const value_13: hub_call_transfer_client.hub_call_transfer_client = hub_call_transfer_client.hub_call_transfer_client.read(input);
                        _returnValue = gate_hub_service.fromTransfer(value_13);
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 14:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        _fieldsSet++;
                        const value_14: hub_call_transfer_entity_complete.hub_call_transfer_entity_complete = hub_call_transfer_entity_complete.hub_call_transfer_entity_complete.read(input);
                        _returnValue = gate_hub_service.fromTransfer_complete(value_14);
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 15:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        _fieldsSet++;
                        const value_15: hub_call_wait_migrate_entity.hub_call_wait_migrate_entity = hub_call_wait_migrate_entity.hub_call_wait_migrate_entity.read(input);
                        _returnValue = gate_hub_service.fromWait_migrate_entity(value_15);
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 16:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        _fieldsSet++;
                        const value_16: hub_call_migrate_entity_complete.hub_call_migrate_entity_complete = hub_call_migrate_entity_complete.hub_call_migrate_entity_complete.read(input);
                        _returnValue = gate_hub_service.fromMigrate_entity_complete(value_16);
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_fieldsSet > 1) {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.INVALID_DATA, "Cannot read a TUnion with more than one set value!");
        }
        else if (_fieldsSet < 1) {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.INVALID_DATA, "Cannot read a TUnion with no set value!");
        }
        if (_returnValue !== null) {
            return _returnValue;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read data for TUnion");
        }
    }
}
